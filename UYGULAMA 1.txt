#include <stdio.h>  // Standart giriÅŸ/Ã§Ä±kÄ±ÅŸ iÅŸlemleri iÃ§in kÃ¼tÃ¼phane

#include <stdint.h>  // Tam sayÄ± tÃ¼rleri iÃ§in (uint32_t, uint8_t) kÃ¼tÃ¼phanesi

// 32-bit veriyi byte olarak bÃ¶lmek iÃ§in union tanÄ±mlÄ±yoruz
typedef union {
    uint32_t veri;    // 32-bit cihaz verisi (tam sayÄ±)
    uint8_t byte[4];  // 4 adet 8-bitlik byte (dizi)
} CihazVerisi;  // Union tÃ¼rÃ¼ne 'CihazVerisi' ismini veriyoruz

// Veriyi byte'lara ayÄ±rarak iÅŸleme fonksiyonu
void sendData(uint8_t *data, uint16_t len) {  
    // 32-bit veriyi byte'lardan geri birleÅŸtiriyoruz
    uint32_t veri = ((uint32_t)data[0] << 24) |   // Ä°lk byte'Ä± 24 bit sola kaydÄ±rÄ±yoruz
                    ((uint32_t)data[1] << 16) |   // Ä°kinci byte'Ä± 16 bit sola kaydÄ±rÄ±yoruz
                    ((uint32_t)data[2] << 8)  |   // ÃœÃ§Ã¼ncÃ¼ byte'Ä± 8 bit sola kaydÄ±rÄ±yoruz
                    ((uint32_t)data[3]);          // DÃ¶rdÃ¼ncÃ¼ byte'Ä± olduÄŸu gibi ekliyoruz

    // ğŸ”¹ AÃ§Ä±k/KapalÄ± durumu (Bit 0)
    uint8_t acikKapali = (veri >> 0) & 1;   // Bit 0'Ä± saÄŸa kaydÄ±rarak ve 1 ile maskeliyoruz

    // ğŸ”¹ Hata DurumlarÄ± (Bit 1 ve 2)
    uint8_t hata1 = (veri >> 1) & 1;   // Bit 1'i saÄŸa kaydÄ±rarak ve 1 ile maskeliyoruz
    uint8_t hata2 = (veri >> 2) & 1;   // Bit 2'yi saÄŸa kaydÄ±rarak ve 1 ile maskeliyoruz

    // ğŸ”¹ KullanÄ±lmayan bit (Bit 3) [Bu sadece gÃ¶sterim amaÃ§lÄ±]
    uint8_t kullanilmiyor = (veri >> 3) & 1;  // Bit 3'Ã¼ saÄŸa kaydÄ±rarak ve 1 ile maskeliyoruz

    // ğŸ”¹ CihazÄ±n Ã§alÄ±ÅŸma sÃ¼resi (Bit 4 - 15, yani 12 bit)
    uint16_t calismaSuresi = (veri >> 4) & 0xFFF;  // 0xFFF = 12 bit maskeleme (bit 4-15 arasÄ±)

    // ğŸ”¹ SÄ±caklÄ±k ham data (Bit 16 - 31, yani 16 bit)
    uint16_t sicaklikHam = (veri >> 16) & 0xFFFF;  // 0xFFFF = 16 bit maskeleme (bit 16-31 arasÄ±)

    // ğŸ”¹ GerÃ§ek sÄ±caklÄ±k deÄŸeri
    float sicaklik = (float)sicaklikHam / 100.0;  // SÄ±caklÄ±k ham verisini 100â€™e bÃ¶lerek gerÃ§ek deÄŸeri elde ediyoruz

    // ğŸ“Œ SonuÃ§larÄ± yazdÄ±r
    printf("AÃ§Ä±k/KapalÄ± Durumu: %d\n", acikKapali);  // AÃ§Ä±k/KapalÄ± durumu ekrana yazdÄ±rÄ±lÄ±r
    printf("Hata Durumu 1: %d\n", hata1);            // Hata durumu 1 ekrana yazdÄ±rÄ±lÄ±r
    printf("Hata Durumu 2: %d\n", hata2);            // Hata durumu 2 ekrana yazdÄ±rÄ±lÄ±r
    printf("KullanÄ±lmayan Bit (3): %d [Dikkate alÄ±nmaz]\n", kullanilmiyor); // KullanÄ±lmayan bit yazdÄ±rÄ±lÄ±r
    printf("Cihaz Ã‡alÄ±ÅŸma SÃ¼resi: %d saat\n", calismaSuresi);  // Ã‡alÄ±ÅŸma sÃ¼resi ekrana yazdÄ±rÄ±lÄ±r
    printf("SÄ±caklÄ±k: %.2fÂ°C\n", sicaklik);  // SÄ±caklÄ±k deÄŸeri ekrana yazdÄ±rÄ±lÄ±r
}

int main() {
    // Union ile Ã¶rnek 32-bit veri oluÅŸturuyoruz
    CihazVerisi veri;  
    veri.veri = 0x75306245;  // ğŸ“Œ Ã–rnek cihazdan gelen veri (hexadecimal formatta)

    // sendData fonksiyonunu Ã§aÄŸÄ±rarak veriyi iÅŸleyelim
    sendData(veri.byte, 4);  // Unionâ€™Ä±n byte dizisini sendData fonksiyonuna gÃ¶nderiyoruz

    return 0;  // Program baÅŸarÄ±yla tamamlandÄ±
}
